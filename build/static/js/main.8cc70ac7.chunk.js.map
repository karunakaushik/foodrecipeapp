{"version":3,"sources":["components/src/css/main.module.css","components/src/css/fooddatabase.module.css","components/src/css/recipe.module.css","components/src/img/cooking.svg","components/src/css/footer.module.css","components/src/css/header.module.css","components/src/img/heart.svg","components/recipe.jsx","components/fooddatabase.jsx","components/index.jsx","components/header.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","className","style","recipe","src","alt","map","ingredient","text","href","FoodDatabase","digest","database","fooddatadiv","subdivfooddata","width","digests","label","total","unit","Main","useState","recipes","setRecipes","search","setSearch","query","setQuery","getRecipes","a","fetch","response","json","data","hits","console","log","useEffect","styles","outercontainer","innerBox","heading","searchDetails","searchDiv","formBox","onSubmit","e","preventDefault","type","placeholder","formControl","value","onChange","target","searchButton","dataoffood","key","recipeBox","Header","chef","Component","Footer","love","heart","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8cc70ac7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outercontainer\":\"main_outercontainer__5-x-N\",\"searchDetails\":\"main_searchDetails__20ahY\",\"innerBox\":\"main_innerBox__1LpzT\",\"heading\":\"main_heading__FMmHB\",\"searchDiv\":\"main_searchDiv__3NazO\",\"formControl\":\"main_formControl__3VpMT\",\"searchButton\":\"main_searchButton__3hfdj\",\"formBox\":\"main_formBox__1joOd\",\"recipeBox\":\"main_recipeBox__3sJ3J\",\"dataoffood\":\"main_dataoffood__lRkua\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fooddataBaseTable\":\"fooddatabase_fooddataBaseTable__2OVdG\",\"image\":\"fooddatabase_image__3eyke\",\"food\":\"fooddatabase_food__275tB\",\"quantity\":\"fooddatabase_quantity__2SKx9\",\"unit\":\"fooddatabase_unit__1rPi9\",\"healthLables\":\"fooddatabase_healthLables__vNoOl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2UvKH\"};","module.exports = __webpack_public_path__ + \"static/media/cooking.2d0ff9ee.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outercontainer\":\"footer_outercontainer__3Zsun\",\"love\":\"footer_love__3dLdq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outercontainer\":\"header_outercontainer__35kgv\"};","module.exports = __webpack_public_path__ + \"static/media/heart.a8cd76c1.svg\";","import React from 'react';\r\nimport style from './src/css/recipe.module.css'\r\n\r\nconst Recipe = ({title,calories,image,ingredients,url }) => {\r\n\r\n    return(\r\n        <div className={style.recipe}>\r\n                   <h1>Recipe</h1>\r\n                   <h1>{title}</h1>\r\n                  <p><b>Calories: {calories}</b></p>\r\n                <img className={style.image} src={image} alt=\"\"/>\r\n             <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                    // <li>{ingredient.food}</li>\r\n                    \r\n\r\n                ))}\r\n            </ol>\r\n            <p>Link: <a href={url}>{url}</a></p>     \r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Recipe;","import React from 'react';\r\nimport style from './src/css/fooddatabase.module.css'\r\n// \r\nconst FoodDatabase = ({title,image, digest}) => {\r\n\r\n    return(\r\n        <div className={style.database}>\r\n           {/* <table className={style.fooddataBaseTable}>\r\n                <tr>\r\n                    <th className={style.image}>Image</th>\r\n                    <th className={style.food}>Food</th>\r\n                    <th className={style.quantity}>Quantity</th>\r\n                    <th className={style.unit}>Unit</th>\r\n                    <th className={style.healthLables}>Healthy</th>\r\n                </tr>\r\n                <tr>\r\n                    <td className={style.image}>\r\n                    <img className={style.image} src={image} alt=\"\" style={{width:\"80%\"}} />\r\n                    </td>\r\n                    <td className={style.food}><h3>{title}</h3></td>\r\n                    <td className={style.quantity}><p> 100 </p></td>\r\n                    <td className={style.unit}><p> g </p></td>\r\n                    <td className={style.healthLables}>\r\n                   \r\n                {digest.map(digests =>(\r\n                    <p>{digests.label}: {digests.total}{digests.unit}</p>\r\n                ))}\r\n           \r\n                    </td>\r\n                </tr>\r\n            </table> */}\r\n\r\n                    <div className={style.fooddatadiv}>\r\n                        <div className={style.subdivfooddata}>\r\n                        <h3>{title}</h3>\r\n                        <img className={style.image} src={image} alt=\"\" style={{width:\"80%\"}} />\r\n                         <p> Quantity: 100 g </p>\r\n\r\n                         <h3>Healthy : </h3> \r\n                                 \r\n                {digest.map(digests =>(\r\n                    <p>{digests.label}: {digests.total}{digests.unit}</p>\r\n                ))}\r\n                        </div>\r\n                        \r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\nexport default FoodDatabase;","import React, { useEffect, useState } from 'react'\r\nimport styles from './src/css/main.module.css'\r\nimport Recipe from './recipe';\r\nimport FoodDatabase from './fooddatabase';\r\n\r\n    const Main = () => {\r\n\r\n        const APP_ID = 'c5344576';\r\n        const APP_KEY = 'a73b4d8f6cc9d7942748a775780a8554';\r\n      \r\n        const [recipes, setRecipes] = useState([]);\r\n        const [search, setSearch] = useState(\"\");\r\n        const [query, setQuery] =useState(\"\");\r\n      \r\n       \r\n       \r\n      \r\n        const getRecipes = async () => {\r\n          const response = await fetch(\r\n            `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n            );\r\n          const data = await response.json();\r\n          setRecipes(data.hits);\r\n          console.log(data.hits);\r\n        }\r\n\r\n       \r\n        useEffect(() => {\r\n            getRecipes();\r\n         // eslint-disable-next-line\r\n         }, [query]);\r\n      \r\n        const updateSearch = e => {\r\n          setSearch(e.target.value);\r\n        }\r\n      \r\n        const getSearch = e => {\r\n            e.preventDefault();\r\n            setQuery(search);\r\n            setSearch('');\r\n        }\r\n  \r\n        \r\n        return (\r\n            <div className={styles.outercontainer}>\r\n                <div className={styles.innerBox}>\r\n                <div className={styles.heading}>\r\n                <h1>Food And Recipe Search</h1>\r\n                </div>\r\n                <div className={styles.searchDetails}>\r\n                <h1>Searching by keyword</h1>\r\n                <p>Enter a what you have eaten, like \"coffee and croissant\" or \"chicken enchilada\" to see how it works. We have accurate data tens of thousands of foods, including international dishes</p>\r\n                </div>\r\n                <div className={styles.searchDiv}>\r\n                <form className={styles.formBox}  onSubmit= {getSearch}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Foods\"\r\n                        className={styles.formControl} \r\n                        value={search}\r\n                        onChange={updateSearch}\r\n                    />\r\n                    &nbsp; \r\n                    &nbsp; \r\n                    <button type=\"submit\" className={styles.searchButton}>Search</button>\r\n                </form>\r\n                </div>\r\n                   <h2>Food Database</h2>\r\n                <div className={styles.dataoffood}>\r\n                    \r\n                    {/* <br />\r\n                    <br /> */}\r\n                    {recipes.map(recipe =>(\r\n                       <FoodDatabase \r\n                       key = {recipe.recipe.label}\r\n                       title={recipe.recipe.label} \r\n                       image={recipe.recipe.image}\r\n                       digest={recipe.recipe.digest}\r\n                    />\r\n          \r\n                ))}\r\n\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n               <div className={styles.recipeBox}>\r\n               <h2>Recipes </h2>\r\n                   {recipes.map(recipe =>(\r\n                       <Recipe \r\n                       key = {recipe.recipe.label}\r\n                       title={recipe.recipe.label} \r\n                       calories={recipe.recipe.calories} \r\n                       image={recipe.recipe.image}\r\n                       ingredients={recipe.recipe.ingredients}\r\n                       url={recipe.recipe.url}/>\r\n          \r\n                ))}\r\n\r\n               </div>\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\nexport default  Main;\r\n\r\n\r\n  \r\n\r\n","import React, { Component } from 'react'\r\nimport styles from './src/css/header.module.css'\r\nimport chef from './src/img/cooking.svg'\r\n\r\nexport default class Header extends Component{\r\n    render() {\r\n        return (\r\n            <div className={styles.outercontainer}>\r\n                    <img src={chef} alt=\"chef\" />\r\n                    <h1>Food-Recipe</h1>\r\n                    <img src={chef} alt=\"chef\" />\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport styles from './src/css/footer.module.css'\r\nimport heart from './src/img/heart.svg'\r\nexport default class Footer extends Component{\r\n    render() {\r\n        return (\r\n            <div className={styles.outercontainer}>\r\n              <div className={styles.love}><p>Made with</p> <img src={heart} alt=\"heart\" /><p> by Karuna</p></div>\r\n              <p>Happy Cooking!</p><br />\r\n              <p>Hope It will help You!</p>\r\n              \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/index';\nimport Header from './components/header';\nimport Footer from './components/footer';\n// import Main from './components';\n\nclass App extends Component{\n\n  render()\n  {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}